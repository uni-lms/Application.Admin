name: Android CI

on:
  pull_request:
    types: [ "opened", "synchronize" ]
jobs:
  build:
    permissions:
      contents: write
      pull-requests: write
    name: Build Signed APK
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'zulu'
          cache: gradle
      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Gradle Wrapper Validation
        uses: gradle/wrapper-validation-action@v1

      - uses: actions/cache@v2
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      # Here we need to decode keystore.jks from base64 string and place it
      # in the folder specified in the release signing configuration
      - name: Decode Keystore
        id: decode_keystore
        uses: timheuer/base64-to-file@v1.2
        with:
          fileName: 'ru.unilms.jks'
          fileDir: '/home/runner/work/Applications/Applications/app/keystore/'
          encodedString: ${{ secrets.KEYSTORE }}

      - name: Decode google-services.json
        id: decode_google
        uses: timheuer/base64-to-file@v1.2
        with:
          fileName: 'google-services.json'
          fileDir: '/home/runner/work/Applications/Applications/app/src/'
          encodedString: ${{ secrets.GOOGLE_SERVICES }}

      # Build and sign APK ("-x test" argument is used to skip tests)
      - name: Build APK
        run: ./gradlew :app:assembleRelease -x test
        env:
          SIGNING_KEY_ALIAS: ${{ secrets.SIGNING_KEY_ALIAS }}
          SIGNING_KEY_PASSWORD: ${{ secrets.SIGNING_KEY_PASSWORD }}
          SIGNING_STORE_PASSWORD: ${{ secrets.SIGNING_STORE_PASSWORD }}

      - name: Retrieve Version
        run: |
          echo "::set-output name=VERSION_NAME::$(./gradlew -q printVersionName)"
        id: android_version

      - name: Extract branch name
        shell: bash
        run: echo "branch=${GITHUB_HEAD_REF:-${GITHUB_REF#refs/heads/}}" >> $GITHUB_OUTPUT
        id: extract_branch

      # Show information about the APK's signing certificates
      - name: Verify Signature
        run: |
          $ANDROID_SDK_ROOT/build-tools/33.0.1/apksigner verify --print-certs app/build/outputs/apk/release/AltenarInternships-${{steps.android_version.outputs.VERSION_NAME}}.apk

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: AltenarInternships-${{steps.android_version.outputs.VERSION_NAME}}.apk
          path: app/build/outputs/apk/release/AltenarInternships-${{steps.android_version.outputs.VERSION_NAME}}.apk
          compression-level: 0
          retention-days: 20
          overwrite: true